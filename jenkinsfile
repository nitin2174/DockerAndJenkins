def WP_CONTAINER_NAME="wordpress"
def MS_CONTAINER_NAME="mysql"
def MS_CONTAINER_TAG="5.7"
def WP_CONTAINER_TAG="latest"
def DOCKER_HUB_USER="nitin2174"
def WP_HTTP_PORT="10127"

node {

    stage('Initialize'){
        def dockerHome = tool 'myDocker'
        env.PATH = "${dockerHome}/bin:${env.PATH}"
        env.PATH = "${env.PATH}:/usr/local/bin"
    }

    stage('Checkout') {
        checkout scm
    }

    stage("Image Prune"){
        imagePrune(MS_CONTAINER_NAME)
        imagePrune(WP_CONTAINER_NAME)
    }

    stage('Image Build'){
        imageBuild(MS_CONTAINER_NAME, MS_CONTAINER_TAG)
        imageBuild(WP_CONTAINER_NAME, WP_CONTAINER_TAG)
    }

    stage('Push to Docker Registry'){
        withCredentials([usernamePassword(credentialsId: 'dockerHubAccount', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            pushToImage(MS_CONTAINER_NAME, MS_CONTAINER_TAG, USERNAME, PASSWORD)
            pushToImage(WP_CONTAINER_NAME, WP_CONTAINER_TAG, USERNAME, PASSWORD)
        }
    }

    stage('Run App'){
        runApp(WP_CONTAINER_NAME, WP_CONTAINER_TAG, DOCKER_HUB_USER, WP_HTTP_PORT)
    }

}

def imagePrune(containerName){
    try {
        sh "docker image prune -f"
        sh "docker stop $containerName"
    } catch(error){}
}

def imageBuild(containerName, tag){
    sh "docker build -t $containerName:$tag  -t ./$containerName --pull --no-cache ."
    echo "Image build complete"
}

def pushToImage(containerName, tag, dockerUser, dockerPassword){
    sh "docker login -u $dockerUser -p $dockerPassword"
    sh "docker tag $containerName:$tag $dockerUser/$containerName:$tag"
    sh "docker push $dockerUser/$containerName:$tag"
    echo "Image push complete"
}

def runApp(containerName, tag, dockerHubUser, httpPort){
    sh "docker pull $dockerHubUser/$containerName"
    sh "docker-compose up -d $dockerHubUser/$containerName"
    echo "Application started on port: ${httpPort} (http)"
}
